on:
  workflow_call:
    inputs:
      folder:
        default: './'
        required: false
        type: string
      toolchain:
        default: 'stable'
        required: false
        type: string
      binary:
        required: true
        type: string
      package:
        required: true
        type: string
      run_dep_script:
        default: false
        required: false
        type: boolean
      dep_script:
        default: '/bin/true'
        required: false
        type: string
      build_version_location:
        default: '/tmp/build_version'
        required: false
        type: string
    secrets:
      git_credential:
        required: false

jobs:
  build-cache:
    if: inputs.binary != ''
    runs-on: ubuntu-latest
    steps:
      - name: Run dependency script
        if: ${{ inputs.run_dep_script }}
        run: ${{ input.dep_script }}
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{ secrets.git_credential }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          target: x86_64-unknown-linux-musl
          profile: minimal
          override: true
      - name: Install musl-tools
        run: sudo apt-get install -y musl-tools
      - name: Checkout
        uses: actions/checkout@v3
      - name: build-version
        run: rm -f ${{ inputs.build_version_location }}; echo ${{ github.sha }} > ${{ inputs.build_version_location }}
      - name: Configure rust cache
        uses: Swatinem/rust-cache@v1
      - name: save rust binary on cache
        id: cache-rust-binary
        uses: actions/cache@v3
        with:
          path: target/x86_64-unknown-linux-musl/release/${{ inputs.binary }}
          key: ${{ github.sha }}-${{ inputs.binary }}
      - name: Build Rust
        run: cd ${{ inputs.folder }} && cargo build --release --package ${{ inputs.package }} --target x86_64-unknown-linux-musl
      - name: Strip Rust
        run: cd ${{ inputs.folder }} && strip target/x86_64-unknown-linux-musl/release/${{ inputs.binary }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.binary }}
          path: ${{ inputs.folder }}/target/x86_64-unknown-linux-musl/release/${{ inputs.binary }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Run dependency script
        if: ${{ inputs.run_dep_script }}
        run: ${{ input.dep_script }}
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{ secrets.git_credential }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          target: x86_64-unknown-linux-musl
          profile: minimal
          override: true
          components: rustfmt, clippy
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v1
      - run: cd ${{ inputs.folder }} && cargo clippy -- --deny "warnings"
      - run: cd ${{ inputs.folder }} && cargo fmt -- --check

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Run dependency script
        if: ${{ inputs.run_dep_script }}
        run: ${{ input.dep_script }}
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{ secrets.git_credential }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          target: x86_64-unknown-linux-musl
          profile: minimal
          override: true
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v1
      - run: cd ${{ inputs.folder }} && cargo test
 